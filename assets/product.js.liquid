// Product Page JavaScript - Luxury Women's Clothing Theme

class ProductPage {
  constructor() {
    this.productId = null;
    this.productData = null;
    this.variantsData = null;
    this.currentVariant = null;
    
    this.initialize();
  }

  initialize() {
    this.productId = document.querySelector('[data-product-section]')?.dataset.productId;
    this.loadProductData();
    this.setupEventListeners();
    this.setupImageGallery();
    this.setupVariantPicker();
    this.setupProductForm();
  }

  loadProductData() {
    try {
      const productJson = document.getElementById(`ProductJson-${this.productId}`);
      const variantsJson = document.getElementById(`ProductVariantsJson-${this.productId}`);
      
      if (productJson) {
        this.productData = JSON.parse(productJson.textContent);
      }
      
      if (variantsJson) {
        this.variantsData = JSON.parse(variantsJson.textContent);
        this.currentVariant = this.variantsData.find(variant => variant.available) || this.variantsData[0];
      }
    } catch (error) {
      console.error('Error loading product data:', error);
    }
  }

  setupEventListeners() {
    // Mobile menu toggle (if needed on product page)
    this.setupMobileMenu();
    
    // Scroll animations
    this.setupScrollAnimations();
    
    // Lazy loading for related products
    this.setupLazyLoading();
  }

  setupImageGallery() {
    const gallery = new ProductGallery();
    gallery.initialize();
  }

  setupVariantPicker() {
    const variantPicker = new VariantPicker({
      productData: this.productData,
      variantsData: this.variantsData,
      onVariantChange: this.handleVariantChange.bind(this)
    });
    variantPicker.initialize();
  }

  setupProductForm() {
    const productForm = new ProductForm({
      productId: this.productId,
      onAddToCart: this.handleAddToCart.bind(this),
      onWishlist: this.handleWishlist.bind(this),
      onShare: this.handleShare.bind(this)
    });
    productForm.initialize();
  }

  handleVariantChange(variant) {
    this.currentVariant = variant;
    this.updateProductDisplay();
  }

  updateProductDisplay() {
    if (!this.currentVariant) return;

    // Update price
    const priceContainer = document.querySelector('[data-product-price-container]');
    if (priceContainer) {
      this.updatePriceDisplay(priceContainer, this.currentVariant);
    }

    // Update availability
    const availabilityElement = document.querySelector('[data-availability-status]');
    if (availabilityElement) {
      this.updateAvailabilityDisplay(availabilityElement, this.currentVariant);
    }

    // Update SKU
    const skuElement = document.querySelector('[data-summary-sku]');
    if (skuElement && this.currentVariant.sku) {
      skuElement.textContent = this.currentVariant.sku;
    }

    // Update product form
    const productIdInput = document.querySelector('[data-product-id]');
    if (productIdInput) {
      productIdInput.value = this.currentVariant.id;
    }

    // Update image if variant has different image
    if (this.currentVariant.featured_image) {
      this.updateProductImage(this.currentVariant.featured_image);
    }
  }

  updatePriceDisplay(container, variant) {
    const isOnSale = variant.compare_at_price > variant.price;
    
    if (isOnSale) {
      container.innerHTML = `
        <div class="price-sale">
          <span class="price-current" data-price-current>${this.formatMoney(variant.price)}</span>
          <span class="price-original" data-price-original>${this.formatMoney(variant.compare_at_price)}</span>
          <span class="price-savings" data-price-savings>
            Save ${this.formatMoney(variant.compare_at_price - variant.price)}
          </span>
        </div>
      `;
    } else {
      container.innerHTML = `
        <div class="price-regular">
          <span class="price-current" data-price-current>${this.formatMoney(variant.price)}</span>
        </div>
      `;
    }
  }

  updateAvailabilityDisplay(element, variant) {
    if (variant.available) {
      element.innerHTML = `
        <div class="status-available">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M13.333 4L6 11.333L2.667 8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          <span>In Stock</span>
        </div>
      `;
    } else {
      element.innerHTML = `
        <div class="status-sold-out">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M12 4L4 12M4 4L12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          <span>Sold Out</span>
        </div>
      `;
    }
  }

  updateProductImage(imageData) {
    const mainImageContainer = document.querySelector('[data-main-image-container]');
    if (mainImageContainer) {
      const newImage = document.createElement('img');
      newImage.src = imageData.src;
      newImage.alt = imageData.alt;
      newImage.className = 'main-image';
      newImage.dataset.zoomImage = imageData.src.replace('width=600', 'width=1200');
      
      const oldImage = mainImageContainer.querySelector('.main-image');
      if (oldImage) {
        oldImage.replaceWith(newImage);
      }
    }
  }

  handleAddToCart(formData) {
    // AJAX add to cart implementation
    this.addToCart(formData);
  }

  handleWishlist() {
    // Wishlist functionality
    this.toggleWishlist();
  }

  handleShare(platform) {
    // Share functionality
    this.shareProduct(platform);
  }

  async addToCart(formData) {
    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      if (response.ok) {
        this.showSuccessMessage('Item added to cart!');
        this.updateCartCount();
      } else {
        throw new Error('Failed to add item to cart');
      }
    } catch (error) {
      console.error('Error adding to cart:', error);
      this.showErrorMessage('Failed to add item to cart. Please try again.');
    }
  }

  toggleWishlist() {
    // Implementation for wishlist functionality
    console.log('Wishlist functionality to be implemented');
  }

  shareProduct(platform) {
    const url = window.location.href;
    const title = document.querySelector('[data-product-title]')?.textContent || '';
    
    switch (platform) {
      case 'facebook':
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
        break;
      case 'twitter':
        window.open(`https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`, '_blank');
        break;
      case 'pinterest':
        const image = document.querySelector('.main-image')?.src || '';
        window.open(`https://pinterest.com/pin/create/button/?url=${encodeURIComponent(url)}&media=${encodeURIComponent(image)}&description=${encodeURIComponent(title)}`, '_blank');
        break;
      case 'link':
        navigator.clipboard.writeText(url).then(() => {
          this.showSuccessMessage('Link copied to clipboard!');
        });
        break;
    }
  }

  showSuccessMessage(message) {
    const successElement = document.querySelector('[data-form-success]');
    if (successElement) {
      successElement.style.display = 'block';
      setTimeout(() => {
        successElement.style.display = 'none';
      }, 3000);
    }
  }

  showErrorMessage(message) {
    const errorElement = document.querySelector('[data-form-error]');
    if (errorElement) {
      errorElement.querySelector('[data-error-message]').textContent = message;
      errorElement.style.display = 'block';
    }
  }

  updateCartCount() {
    // Update cart count in header
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartCountElements = document.querySelectorAll('[data-cart-count]');
        cartCountElements.forEach(element => {
          element.textContent = cart.item_count;
        });
      });
  }

  formatMoney(amount) {
    // Basic money formatting - should be enhanced with Shopify's money format
    return '$' + (amount / 100).toFixed(2);
  }

  setupMobileMenu() {
    const toggleBtn = document.querySelector('[data-mobile-menu-toggle]');
    const menu = document.querySelector('[data-mobile-menu]');
    
    if (toggleBtn && menu) {
      toggleBtn.addEventListener('click', () => {
        menu.classList.toggle('active');
      });
    }
  }

  setupScrollAnimations() {
    // Add scroll animations for product sections
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);

    document.querySelectorAll('.product-section').forEach(section => {
      observer.observe(section);
    });
  }

  setupLazyLoading() {
    // Lazy load related products images
    const lazyImages = document.querySelectorAll('[data-lazy-image]');
    
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.remove('lazy');
          imageObserver.unobserve(img);
        }
      });
    });

    lazyImages.forEach(img => imageObserver.observe(img));
  }
}

// Product Gallery Class
class ProductGallery {
  constructor() {
    this.currentImageIndex = 0;
    this.images = [];
    this.isZoomed = false;
    this.isLightboxOpen = false;
  }

  initialize() {
    this.loadImages();
    this.setupGalleryEvents();
    this.setupThumbnailEvents();
    this.setupLightboxEvents();
    this.setupZoomEvents();
    this.setupMobileSwipe();
  }

  loadImages() {
    const thumbnailButtons = document.querySelectorAll('[data-thumbnail]');
    this.images = Array.from(thumbnailButtons).map(btn => ({
      src: btn.dataset.imageSrc,
      zoomSrc: btn.dataset.zoomSrc,
      index: parseInt(btn.dataset.imageIndex)
    }));
  }

  setupGalleryEvents() {
    // Navigation arrows
    const prevBtn = document.querySelector('[data-nav-prev]');
    const nextBtn = document.querySelector('[data-nav-next]');
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => this.previousImage());
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => this.nextImage());
    }

    // Main image click for lightbox
    const mainImage = document.querySelector('.main-image');
    if (mainImage) {
      mainImage.addEventListener('click', () => this.openLightbox());
    }
  }

  setupThumbnailEvents() {
    const thumbnailButtons = document.querySelectorAll('[data-thumbnail]');
    
    thumbnailButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const index = parseInt(btn.dataset.imageIndex);
        this.switchToImage(index);
      });
    });

    // Thumbnail navigation
    const thumbPrev = document.querySelector('[data-thumbnail-prev]');
    const thumbNext = document.querySelector('[data-thumbnail-next]');
    
    if (thumbPrev) {
      thumbPrev.addEventListener('click', () => this.scrollThumbnails('prev'));
    }
    
    if (thumbNext) {
      thumbNext.addEventListener('click', () => this.scrollThumbnails('next'));
    }
  }

  setupLightboxEvents() {
    const lightbox = document.querySelector('[data-lightbox-overlay]');
    const closeBtn = document.querySelector('[data-lightbox-close]');
    const lightboxPrev = document.querySelector('[data-lightbox-prev]');
    const lightboxNext = document.querySelector('[data-lightbox-next]');
    
    if (lightbox) {
      lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) {
          this.closeLightbox();
        }
      });
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', () => this.closeLightbox());
    }
    
    if (lightboxPrev) {
      lightboxPrev.addEventListener('click', () => this.previousImage());
    }
    
    if (lightboxNext) {
      lightboxNext.addEventListener('click', () => this.nextImage());
    }

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (this.isLightboxOpen) {
        if (e.key === 'Escape') this.closeLightbox();
        if (e.key === 'ArrowLeft') this.previousImage();
        if (e.key === 'ArrowRight') this.nextImage();
      }
    });
  }

  setupZoomEvents() {
    const zoomIn = document.querySelector('[data-zoom-in]');
    const zoomOut = document.querySelector('[data-zoom-out]');
    const mainImage = document.querySelector('.main-image');
    
    if (zoomIn && mainImage) {
      zoomIn.addEventListener('click', () => this.zoomIn());
    }
    
    if (zoomOut && mainImage) {
      zoomOut.addEventListener('click', () => this.zoomOut());
    }
    
    if (mainImage) {
      mainImage.addEventListener('mousemove', (e) => this.handleZoomPan(e));
    }
  }

  setupMobileSwipe() {
    const mainImageContainer = document.querySelector('[data-main-image-container]');
    
    if (mainImageContainer && this.isTouchDevice()) {
      let startX = 0;
      let endX = 0;
      
      mainImageContainer.addEventListener('touchstart', (e) => {
        startX = e.changedTouches[0].screenX;
      });
      
      mainImageContainer.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].screenX;
        this.handleSwipe(startX, endX);
      });
    }
  }

  switchToImage(index) {
    if (index < 0 || index >= this.images.length) return;
    
    this.currentImageIndex = index;
    this.updateMainImage();
    this.updateThumbnails();
    this.updateCounters();
    
    if (this.isLightboxOpen) {
      this.updateLightboxImage();
    }
  }

  previousImage() {
    let newIndex = this.currentImageIndex - 1;
    if (newIndex < 0) newIndex = this.images.length - 1;
    this.switchToImage(newIndex);
  }

  nextImage() {
    let newIndex = this.currentImageIndex + 1;
    if (newIndex >= this.images.length) newIndex = 0;
    this.switchToImage(newIndex);
  }

  updateMainImage() {
    const mainImage = document.querySelector('.main-image');
    const imageData = this.images[this.currentImageIndex];
    
    if (mainImage && imageData) {
      mainImage.src = imageData.src;
      mainImage.dataset.zoomImage = imageData.zoomSrc;
    }
  }

  updateThumbnails() {
    const thumbnailButtons = document.querySelectorAll('[data-thumbnail]');
    
    thumbnailButtons.forEach(btn => {
      btn.classList.remove('thumbnail-btn--active');
      if (parseInt(btn.dataset.imageIndex) === this.currentImageIndex) {
        btn.classList.add('thumbnail-btn--active');
      }
    });
  }

  updateCounters() {
    const counters = document.querySelectorAll('[data-current-image], [data-lightbox-current]');
    counters.forEach(counter => {
      counter.textContent = this.currentImageIndex + 1;
    });
  }

  openLightbox() {
    this.isLightboxOpen = true;
    const lightbox = document.querySelector('[data-lightbox-overlay]');
    if (lightbox) {
      lightbox.style.display = 'block';
      this.updateLightboxImage();
      document.body.style.overflow = 'hidden';
    }
  }

  closeLightbox() {
    this.isLightboxOpen = false;
    const lightbox = document.querySelector('[data-lightbox-overlay]');
    if (lightbox) {
      lightbox.style.display = 'none';
      document.body.style.overflow = '';
    }
  }

  updateLightboxImage() {
    const lightboxImage = document.querySelector('.lightbox-image');
    const imageData = this.images[this.currentImageIndex];
    
    if (lightboxImage && imageData) {
      lightboxImage.src = imageData.zoomSrc;
    }
  }

  zoomIn() {
    const mainImage = document.querySelector('.main-image');
    if (mainImage) {
      mainImage.style.transform = 'scale(1.5)';
      this.isZoomed = true;
    }
  }

  zoomOut() {
    const mainImage = document.querySelector('.main-image');
    if (mainImage) {
      mainImage.style.transform = 'scale(1)';
      this.isZoomed = false;
    }
  }

  handleZoomPan(e) {
    if (!this.isZoomed) return;
    
    const mainImage = document.querySelector('.main-image');
    if (mainImage) {
      // Basic zoom panning implementation
      const rect = mainImage.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width;
      const y = (e.clientY - rect.top) / rect.height;
      
      mainImage.style.transformOrigin = `${x * 100}% ${y * 100}%`;
    }
  }

  handleSwipe(startX, endX) {
    const swipeThreshold = 50;
    const diff = startX - endX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        this.nextImage(); // Swipe left
      } else {
        this.previousImage(); // Swipe right
      }
    }
  }

  scrollThumbnails(direction) {
    const container = document.querySelector('[data-thumbnails-container]');
    if (container) {
      const scrollAmount = direction === 'next' ? 100 : -100;
      container.scrollLeft += scrollAmount;
    }
  }

  isTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  }
}

// Variant Picker Class
class VariantPicker {
  constructor(options) {
    this.productData = options.productData;
    this.variantsData = options.variantsData;
    this.onVariantChange = options.onVariantChange;
    this.currentOptions = {};
  }

  initialize() {
    this.setupOptionEvents();
    this.updateVariantSummary();
  }

  setupOptionEvents() {
    const optionInputs = document.querySelectorAll('[data-option-input]');
    
    optionInputs.forEach(input => {
      input.addEventListener('change', () => {
        this.handleOptionChange(input);
      });
    });
  }

  handleOptionChange(input) {
    const optionName = input.name.replace('options[', '').replace(']', '');
    const optionValue = input.value;
    
    this.currentOptions[optionName] = optionValue;
    
    const selectedVariant = this.findVariantByOptions();
    if (selectedVariant) {
      this.onVariantChange(selectedVariant);
      this.updateOptionAvailability();
    }
    
    this.updateVariantNotice();
  }

  findVariantByOptions() {
    return this.variantsData.find(variant => {
      return variant.options.every((option, index) => {
        const optionName = this.productData.options[index].name;
        return this.currentOptions[optionName] === option;
      });
    });
  }

  updateOptionAvailability() {
    // Update disabled states based on selected options
    const optionInputs = document.querySelectorAll('[data-option-input]');
    
    optionInputs.forEach(input => {
      const optionName = input.name.replace('options[', '').replace(']', '');
      const optionValue = input.value;
      
      // Check if this option value is available with current selections
      const isAvailable = this.isOptionAvailable(optionName, optionValue);
      input.disabled = !isAvailable;
      
      // Update corresponding label
      const label = document.querySelector(`label[for="${input.id}"]`);
      if (label) {
        label.classList.toggle('option-swatch--disabled', !isAvailable);
        label.classList.toggle('option-button--disabled', !isAvailable);
      }
    });
  }

  isOptionAvailable(optionName, optionValue) {
    // Check if any variant exists with this option combination
    const testOptions = { ...this.currentOptions, [optionName]: optionValue };
    
    return this.variantsData.some(variant => {
      return variant.available && variant.options.every((option, index) => {
        const currentOptionName = this.productData.options[index].name;
        return testOptions[currentOptionName] === option;
      });
    });
  }

  updateVariantSummary() {
    // Initial summary update
    if (this.variantsData.length > 0) {
      const firstVariant = this.variantsData.find(v => v.available) || this.variantsData[0];
      this.onVariantChange(firstVariant);
    }
  }

  updateVariantNotice() {
    const notice = document.querySelector('[data-variant-notice]');
    const selectedVariant = this.findVariantByOptions();
    
    if (notice) {
      if (selectedVariant) {
        notice.style.display = 'none';
      } else {
        notice.style.display = 'block';
      }
    }
  }
}

// Product Form Class
class ProductForm {
  constructor(options) {
    this.productId = options.productId;
    this.onAddToCart = options.onAddToCart;
    this.onWishlist = options.onWishlist;
    this.onShare = options.onShare;
  }

  initialize() {
    this.setupFormEvents();
    this.setupWishlistEvents();
    this.setupShareEvents();
    this.setupQuantityEvents();
  }

  setupFormEvents() {
    const form = document.querySelector('[data-product-form]');
    if (form) {
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleFormSubmit();
      });
    }
  }

  setupWishlistEvents() {
    const wishlistBtn = document.querySelector('[data-wishlist-btn]');
    if (wishlistBtn) {
      wishlistBtn.addEventListener('click', () => {
        this.onWishlist();
      });
    }
  }

  setupShareEvents() {
    const shareBtn = document.querySelector('[data-share-btn]');
    const shareModal = document.querySelector('[data-share-modal]');
    
    if (shareBtn && shareModal) {
      shareBtn.addEventListener('click', () => {
        shareModal.style.display = 'block';
      });
    }
    
    // Share platform buttons
    const shareOptions = document.querySelectorAll('[data-share-facebook], [data-share-twitter], [data-share-pinterest], [data-share-link]');
    shareOptions.forEach(option => {
      option.addEventListener('click', () => {
        const platform = Object.keys(option.dataset)[0].replace('share', '').toLowerCase();
        this.onShare(platform);
        shareModal.style.display = 'none';
      });
    });
    
    // Close modal
    const closeBtn = document.querySelector('[data-share-close]');
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        shareModal.style.display = 'none';
      });
    }
  }

  setupQuantityEvents() {
    const decreaseBtn = document.querySelector('[data-quantity-decrease]');
    const increaseBtn = document.querySelector('[data-quantity-increase]');
    const quantityInput = document.querySelector('[data-quantity-input]');
    
    if (decreaseBtn && quantityInput) {
      decreaseBtn.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value);
        if (currentValue > 1) {
          quantityInput.value = currentValue - 1;
        }
      });
    }
    
    if (increaseBtn && quantityInput) {
      increaseBtn.addEventListener('click', () => {
        const currentValue = parseInt(quantityInput.value);
        quantityInput.value = currentValue + 1;
      });
    }
  }

  handleFormSubmit() {
    const form = document.querySelector('#product-form');
    const formData = new FormData(form);
    
    // Show loading state
    this.setLoadingState(true);
    
    // Convert to JSON for AJAX request
    const jsonData = {
      items: [{
        id: formData.get('id'),
        quantity: parseInt(formData.get('quantity'))
      }]
    };
    
    this.onAddToCart(jsonData);
    
    // Reset loading state after delay
    setTimeout(() => {
      this.setLoadingState(false);
    }, 1000);
  }

  setLoadingState(loading) {
    const addToCartBtn = document.querySelector('[data-add-to-cart]');
    if (addToCartBtn) {
      if (loading) {
        addToCartBtn.disabled = true;
        addToCartBtn.classList.add('loading');
      } else {
        addToCartBtn.disabled = false;
        addToCartBtn.classList.remove('loading');
      }
    }
  }
}

// Initialize Product Page when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  new ProductPage();
});

// Export for potential modular use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { ProductPage, ProductGallery, VariantPicker, ProductForm };
}